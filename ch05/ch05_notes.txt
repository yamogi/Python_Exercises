Title:
 - Lists and Dictionaries: The Hangman Game
Chapter Objectives:
 - To
   - Create, index, and slice a list
   - Add and delete elements from a list
   - Use list methods to append and sort a list
   - Use nested sequences to represent even more complex information
   - Use dictionaries to work with pairs of data
   - Add and delete dictionary items

***
Notes
***
 - Lists are sequences, like tuples
   - Lists are mutable - they can be modified
   - Everything you can do with tuples can also be done with lists
   - See hero_inventory3.py
     - Lists can also be concatenated, just like tuples
 - Understanding list mutability
   - See hero_inventory3.py again, for:
     - Assigning a new list element by index
     - Assigning a new list slice
     - Deleting a list element
     - Deleting a list slice
 - Using list methods
   - You can do the following:
     - Add an element
     - Remove an element based on its value
     - Sort a list
     - Reverse the order of a list
   - See high_scores.py
 - Selected list methods:
     append(value)      - Adds value to end of a list.
     sort()             - Sorts the elements, smallest value first. Optionally,
                          you  can  pass  a  Boolean  value  to  the  parameter
                          reverse.  If  you pass True, the list  will be sorted
                          with the largest value first.
     reverse()          - Reverse the order of a list.
     count(value)       - Returns the number of occurrences of value.
     index(value)       - Returns the first position of where value occurs.
     insert(i, value)   - Inserts value at position i.
     pop([i])           - Returns value at position  i  and removes value  from
                          the  list.   Providing the  position  number   i   is
                          optional. Without it, the last element in the list is
                          removed and returned.
     remove(value)      - Removes the first occurrence of value from the list.

 - When to use tuples instead of lists?
   - Tuples are faster than lists
     - This is because the computer knows they won't change
     - The speed difference, however, is often negligible
   - They're great for making constants due to their immutability
     - They add a level of safety and clarity to your code
   - Sometimes, tuples are required
     - Python may require immutable values (example: dictionaries)
 - For the majority of the time, however, it's probably better to use lists
 ------------------------------------------------
 - Nested sequences
   - Lists and tuples can contain sequences of sequences
   - Example: presents shopping list
     - Name 1
       - Present 1
       - Present 2
     - Name 2
       - Present 1
       - Present 2
   - Example Python one-liners:
     >>> nested = ["first, ("second", third"), ["fourth", "fifth", "sixth"]]
     >>> print(nested)
     ["first, ("second", "third"), ["fourth", "fifth", "sixth"]]
     >>> # six strings, but only three elements
     >>> # - first element is the string "first"
     >>> # - second element is the tuple ("second", "third")
     >>> # - third element is the list ["fourth", "fifth", "sixth"]
     >>> #---------------------------------------------------------------------
     >>> scores = [("Moe", 1000), ("Larry", 1500), ("Curly", 3000)]
     >>> print(scores)
     [("Moe", 1000), ("Larry", 1500), ("Curly", 3000)]
     >>> # scores is a list with three elements
     >>> # each element is a tuple
     >>> # each tuple has two elements - a string and a number
     >>> #---------------------------------------------------------------------
     >>> scores = [("Moe", 1000), ("Larry", 1500), ("Curly", 3000)]
     >>> print(scores[0])
     ('Moe', 1000)
     >>> print(scores[1])
     ('Larry', 1500)
     >>> print(scores[2])
     ('Curly', 3000)
     >>> # each element is a tuple
     >>> # what if you want to access one of the elements in a tuple?
     >>> #---------------------------------------------------------------------
     >>> a_score = scores[2]
     >>> print(a_score)
     ('Curly', 3000)
     >>> print(a_score[0])
     Curly
     >>> #---------------------------------------------------------------------
     >>> # OR
     >>> #---------------------------------------------------------------------
     >>> print(scores[2][0])
     Curly
     >>> #---------------------------------------------------------------------
     >>> # unpacking a sequence
     >>> name, score = ("Shemp", 175)
     >>> print(name)
     Shemp
     >>> print(score)
     175
   - See high_scores2.py
 ------------------------------------------------------------------------------
 - Remember that with variables, the variable does not store a copy of the value, it simply stores the value in memory and then points to it:

                       ----------
        language ---> |  Python  |
                       ----------

   - This is important when refering to mutable (changeable) values
   - For example, when a single variable is referred to multiple timed by
     different names

     >>> mike = ["khakis", "dress shirt", "jacket"]
     >>> mr_dawson = mike
     >>> honey = mike
     >>> print(mike)
     ['khakis', 'dress shirt', 'jacket']
     >>> print(mr_dawson)
     ['khakis', 'dress shirt', 'jacket']
     >>> print(honey)
     ['khakis', 'dress shirt', 'jacket']

        mike --------\
                        -------------------------------------------
        mr_dawson ---> |  "khakis"  |  "dress shirt"  |  "jacket"  |
                        -------------------------------------------
        honey -------/

     - A change in ANY list affects all of the other ones!

     >>> honey[2] = "red sweater"
     >>> print(honey)
     ['khakis', 'dress shirt', 'red sweater']
     >>> print(mike)
     ['khakis', 'dress shirt', 'red sweater']
     >>> print(mr_dawson)
     ['khakis', 'dress shirt', 'red sweater']

     - Always be aware of <shared references> when using mutable values
     - You can avoid this by creating a copy of the list through slicing:

     >>> mike = ["khakis", "dress shirt", "jacket"]
     >>> honey = mike[:]
     >>> honey[2] = "red sweater"
     >>> print(honey)
     ['khakis', 'dress shirt', 'red sweater']
     >>> print(mike)
     ['khakis', 'dress shirt', 'jacket']

-------------------------------------------------------------------------------
DICTIONARIES
-------------------------------------------------------------------------------
 - Instead of storing data in sequences, dictionaries stores data in pairs
   - Think of an actual dictionary: each word is paired with its definition
   - In Python terms, these are referred to as keys and values
   - See geek_translator.py
 - Some dictionary rules
   - A dictionary can't contain multiple items with the same key
   - A key has to be immutable, i.e. a string, number or a tuple
   - Values don't have to be unique. They can be mutable or immutable.
 - Dictionary methods:
     get(key, [default])    - Returns the value of key
                            - If key doesn't exist, then the optional default
                              is returned
                            - If key doesn't exist and default isn't specified,
                              then None is returned
     keys()                 - Returns a view of all the keys in a dictionary
     values()               - Returns a view of all the values in a dictionary
     items()                - Returns a view of all the items in a dictionary
                            - Each item is a two-element tuple, where the first
                              element is a key and the second element is the
                              key's value

 - See hangman.py

